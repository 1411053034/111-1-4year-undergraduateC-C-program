#include <stdio.h>
#define SIZE 4
#define size 10
//int binarySearch(int b[], int searchKey, int low, int high);
void sort(int a[][SIZE], int n);
void swap(int* e1Ptr, int* e2Ptr);
void mod(int a[][SIZE]);
void sort1(int a[][SIZE], int n);
void sort2(int a[][SIZE], int n);
int a[10][SIZE] =     { {2,98,72,0},
                        {3,76,32,0},
                        {6,98,67,0},
                        {7,89,32,0},
                        {8,98,55,0},
                        {9,89,32,0},
                        {10,98,65,0},
                        {11,99,32,0},
                        {12,98,71,0},
                        {13,76,91,0}, };
    int b[10][2];
// function main begins program execution
int main(void)
{
    int key, result = 0, i, j;
    // initialize a
    
   
    puts("Data items in original order");
    // output original array
    for (j = 0; j < 10; j++)
    {
        for (i = 1; i < SIZE - 1; ++i) {
            a[j][3] += a[j][i];
        }
    }

    for (j = 0; j < 10; j++)
    {
        for (i = 0; i < SIZE; ++i) {
            printf("%4d", a[j][i]);
        }
        printf("\n");
    }

    /*    printf("\n");
        for (i = 0; i < SIZE; ++i) {
            printf("%4d", a[1][i]);
        }
    */
    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, size);
    puts("\nData items in ascending order");

    for (j = 0; j < 10; j++)
    {
        for (i = 0; i < SIZE; ++i) {
            printf("%4d", a[j][i]);
        }
        printf("\n");
    }
    printf("最高平均是%d號%d分\n", a[0][0], a[0][3]/2);
    printf("最低平均是%d號%d分\n", a[9][0], a[9][3]/2);
    printf("平均中位數是%d號%d分\n", a[4][0], a[4][3] / 2);
  
}


void sort(int a[][SIZE], int n)
{
    int hold, pass, i;
    for (pass = 1; pass < n; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < n - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][3] < a[i + 1][3]) {
                swap(&a[i][0], &a[i + 1][0]);
                swap(&a[i][1], &a[i + 1][1]);
                swap(&a[i][2], &a[i + 1][2]);
                swap(&a[i][3], &a[i + 1][3]);
            }
        }
    }

}

void swap(int* e1Ptr, int* e2Ptr)
{
    int hold;
    hold = *e1Ptr;
    *e1Ptr = *e2Ptr;
    *e2Ptr = hold;
}

void sort1(int a[][SIZE], int n)
{
    int hold, pass, i;
    for (pass = 1; pass < n; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < n - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][2] < a[i + 1][2]) {
                swap(&a[i][0], &a[i + 1][0]);
                swap(&a[i][1], &a[i + 1][1]);
                swap(&a[i][2], &a[i + 1][2]);
                swap(&a[i][3], &a[i + 1][3]);

            }

        }
    }

}
void sort2(int a[][SIZE], int n)
{
    int hold, pass, i;
    for (pass = 1; pass < n; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < n - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][1] < a[i + 1][1]) {
                swap(&a[i][0], &a[i + 1][0]);
                swap(&a[i][1], &a[i + 1][1]);
                swap(&a[i][2], &a[i + 1][2]);
                swap(&a[i][3], &a[i + 1][3]);

            }

        }
    }

}
void mod(int a[][SIZE]) 
{
    int b[10] = { 1,1,1,1,1,1,1,1,1,1 };
    int  i, j;
    int mod;
    sort1(a, size);
    for ( j = 0; j < 10; j++)
    {
        if (a[j][2]== a[j+1][2])
        {
            b[i]++;
        }
        else
        {
            i++;
        }
        
    }

}
