#include <stdio.h>
#define SIZE 10
int a[SIZE] = { 2,6,4,8,10,12,89,68,45,37 }, key, i, j = 0;
int c[SIZE] = { 66,67,66,70,73,74,75,75,62,32 };
void sort(int a[SIZE], int c[SIZE]);
int binarySearch(int b[], int searchKey, int low, int high);
int main(void) {

	puts("Data items in originall order");
	for (size_t i = 0; i < SIZE; i++)
	{
		printf("%4d", a[i]);
		printf("%4d\n", c[i]);
	}

	sort(a, c);
	puts("\nData items in ascending order");
	for (size_t i = 0; i < SIZE; i++)
	{
		printf("%4d", a[i]);
		printf("%4d\n", c[i]);

	}

	printf("Input student score: ");
	scanf_s("%d", &key);
	j = binarySearch(c, key, 0, SIZE - 1);
	if (j ==-1)
		printf("查無此成績!!");
	else printf("成績為%d的同學的學號為: %d", key, a[j]);





	puts("");

}
void sort(int a[], int c[])
{
	for (int pass = 1; pass < SIZE; pass++)
	{
		for (size_t i = 0; i < SIZE - 1; i++)
		{
			if (c[i] > c[i + 1])
			{
				int scorea = c[i];
				int ida = a[i];
				a[i] = a[i + 1];
				a[i + 1] = ida;
				c[i] = c[i + 1];
				c[i + 1] = scorea;
			}
		}
	}

}


int binarySearch(int b[], int searchKey, int low, int high)
{
	while (low <= high) {

		size_t middle = (low + high) / 2;

		if (searchKey == b[middle]) {
			return middle;
		}

		else if (searchKey < b[middle]) {
			high = middle - 1; 
		}

		else {
			low = middle + 1; 
		}
	} 

	return -1;
}
test2
#include <stdio.h>
#define SIZE 20
int id[] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };
int score[] = { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,66 }; 
void sort(int a[SIZE], int c[SIZE]);
int key,l,k,j,avg,midd;
int binarySearch(int b[], int searchKey, int low, int high);
int math1(int e[],int avge);
int math2( int g[], int mid);
int main(void) {

	puts("Data items in originall order");
	for (size_t i = 0; i < SIZE; i++)
	{
		printf("%4d", id[i]);
		printf("%4d\n", score[i]);
	}

	sort(id, score);
	puts("\nData items in ascending order");
	for (size_t i = 0; i < SIZE; i++)
	{
		printf("%4d", id[i]);
		printf("%4d\n", score[i]);

	}
	puts("");
	printf("Input student score: ");
	scanf_s("%d", &key);
	j = binarySearch(score, key, 0, SIZE - 1);
	if (j ==-1)
		printf("查無此成績!!");
	else printf("成績為%d的同學的學號為: %d", key, id[j]);
	puts("");
	k = math1(score, avg);
	printf("全班分數的平均為：%d", k);
	l = math2( score, midd);
	printf("\n中位數為%d", l);

	

}
void sort(int a[], int c[])
{
	for (int pass = 1; pass < SIZE; pass++)
	{
		for (size_t i = 0; i < SIZE - 1; i++)
		{
			if (c[i] > c[i + 1])
			{
				int scorea = c[i];
				int ida = a[i];
				a[i] = a[i + 1];
				a[i + 1] = ida;
				c[i] = c[i + 1];
				c[i + 1] = scorea;
			}
		}
	}

}


int binarySearch(int b[], int searchKey, int low, int high)
{
	while (low <= high) {

		size_t middle = (low + high) / 2;

		if (searchKey == b[middle]) {
			return middle;
		}

		else if (searchKey < b[middle]) {
			high = middle - 1; 
		}

		else {
			low = middle + 1; 
		}
	} 

	return -1;
}
int math1(int e[], int avge)
{
	int i ,sum=0;
	for ( i = 0; i < SIZE; i++)
	{
		sum = sum + e[i];
	}

	avge = sum / SIZE;
	return avge;
}

int math2( int g[], int mid) {
	int a1 = 0;
	a1 = (0 + SIZE - 1)/2;
	mid = g[a1];
	return mid;


}
test3
排列時 if (sc[i] < sc[i + 1])
無法由小到大排序 改成大於即可
