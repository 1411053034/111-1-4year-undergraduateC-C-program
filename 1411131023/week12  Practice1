題目:建立兩個大小為20的整數陣列，分別存放學生學號以對應的計概成績。寫一個排序副程式，將兩個陣列傳遞至副程式中，依照計概成績由小到大排序，由主程式印出排序後的結果，輸入學生計概成績，
用二元陣列搜尋找出該生的學號並印出他的學號與成績，若找不到則印出"找不到!"
#include <stdio.h>
#define SIZE 20
void bubbleSort(int* const id, int* const sc, int size);
void swap(int* ePtr1, int* ePtr2);
int binarySearch(const int b[], int searchkey, int low, int hight);
int main(void)
{
    int i,key;
    int id[SIZE] = { 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 36, 37 };
    int sc[SIZE] = { 58, 82, 66, 70, 73, 74, 75, 79, 62, 32, 44, 46, 27, 12, 80, 63, 67, 90, 11, 98 };
    puts("The oringinal array is:");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", id[i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", sc[i]);
    }
    bubbleSort(id, sc, SIZE);
    puts("\nThe new array is:");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", id[i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", sc[i]);
    }

    printf("\nEnter Score:");
    scanf_s("%d",&key);
    int result = binarySearch(sc, key, 0,SIZE - 1);
    if (result != -1) {
        printf("ID=%d and Score=%d", id[result],key);
    }
    else
    {
        printf("Not be found");
    }
}
void bubbleSort(int* const id, int* const sc, int size) {
    void swap(int* ePtr1, int* ePtr2);
    for (unsigned int pass = 0; pass < size - 1; ++pass) {
        for (int j = 0; j < size - 1; ++j) {
            if (sc[j] > sc[j + 1]) {
                swap(&sc[j], &sc[j + 1]);
                swap(&id[j], &id[j + 1]);
            }
        }
    }
}
void swap(int* ePtr1, int* ePtr2) {
    int hold;
    hold = *ePtr1;
    *ePtr1 = *ePtr2;
    *ePtr2 = hold;
}
int binarySearch(const int b[], int searchkey, int low, int hight) {
    while (low <= hight) {
        int middle = (low + hight) / 2;

        if (searchkey == b[middle]) {
            return middle;
        }
        else if (searchkey < b[middle]) {
            hight = middle - 1;
        }
        else
        {
            low = middle + 1;
        }
    }
    return -1;
}

