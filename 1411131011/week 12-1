#include<stdio.h>
#define SIZE 20

void sort(int a[], int sc[], int size);
int binarySearch(const int b[], int searchkey, int low, int high);

// void printHeader(void);

int main(void)
{
	int a[SIZE] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };
	int sc[SIZE] = { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,66 };

	puts("Data items in original order");

	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", a[i]);
		printf("%4d", sc[i]);
	}

	printf("\n");

	puts("\nData items in ascending order");
    sort(a, sc, SIZE);
	int i;
	for (i = 0; i < SIZE; ++i) {
		printf("%4d", a[i]);
	}
	printf("\n");
	for (i = 0; i < SIZE; ++i) {
		printf("%4d", sc[i]);
	}

	puts("");

	printf("\n");
	printf("Enter student score:");
	int key;
	scanf_s("%d", &key);

	int result = binarySearch(sc, key, 0, SIZE - 1);

	if (result != -1) {
		printf("\nScore %d is student ID %d\n", key, a[result]);
	}
	else {
		printf("\nScore %d not found\n", key);
	}
}

void sort(int a[], int sc[], int size)
{
	for (int pass = 1; pass < SIZE; ++pass) {
		for (int i = 0; i < SIZE - pass; ++i) {
			if (sc[i] > sc[i + 1]) {
				int hold = a[i];
				a[i] = a[i + 1];
				a[i + 1] = hold;

				hold = sc[i];
				sc[i] = sc[i + 1];
				sc[i + 1] = hold;
			}
		}
	}
}
int binarySearch(const int b[], int searchKey, int low, int high) {
	while (low <= high) {
		int middle = (low + high) / 2; //printfRow(b, low, middle, high);

		if (searchKey == b[middle]) {
			return middle;
		}
		else if (searchKey < b[middle]) {
			high = middle - 1;
		}
		else {
			low = middle + 1;
		}
	}//end while
	return -1; //searchKey not found
}
