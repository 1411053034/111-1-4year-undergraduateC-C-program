#include <stdio.h>
#define SIZE 20

int binarySearch(const int b[], int key, int low, int high);
void sort(int a[], int sc[]);
// function main begins program execution
int main(void)
{
    // initialize a
    int i;
    int key;
    int result;
    int a[SIZE] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };//學號
    int c[SIZE] = { 66,67,66,70,73,74,75,79,62,32,44,46,27,12,80,63,66,90,11,66 };//分數

    puts("Data items in original order");//原始陣列
    // output original array
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", c[i]);
    }

    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, c);

    puts("\nData items be sorted ");//排序後陣列

    // output sorted array
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", c[i]);
    }

    puts("");

    printf("請輸入要查詢的成績");
    scanf_s("%d", &key);
    
    if ((result = binarySearch(c, key, 0, SIZE - 1)) == -1)
        printf("查無此人成績%d", key);
    printf("成績為%d的同學學號為: %d", key, a[result]);

}
void sort(int id[], int sc[])
{
    int pass, i, hold;
    for (unsigned int pass = 1; pass < SIZE; ++pass) {

        for (i = 0; i < SIZE - pass; ++i) {

            if (sc[i] > sc[i + 1]) {
                hold = id[i];
                id[i] = id[i + 1];
                id[i + 1] = hold;

                hold = sc[i];
                sc[i] = sc[i + 1];
                sc[i + 1] = hold;
            }
        }
    }
}


int binarySearch(const int b[], int key, int low, int high) {

    int middle;

    while (low <= high) {
        middle = (low + high) / 2;

        if (key == b[middle]) {
            return middle;
        }
        else if (key < b[middle]) {
            high = middle - 1;
        }
        else {
            low = middle + 1;
        }
    }

    return -1;
}
