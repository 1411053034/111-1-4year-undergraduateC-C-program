problem1
#include <stdio.h>
#define SIZE 4
#define stu 10
//int binarySearch(int b[], int searchKey, int low, int high);
void sort(char **name[], int a[][SIZE], int size);
// function main begins program execution
int main(void)
{
    int key,result=0,i,j;
    // initialize a
    int a[10][SIZE] = {{2,98,72,0},
						{3,76,32,0},
						{6,98,67,0},
						{7,89,32,0},
						{8,98,55,0},
						{9,90,32,0},
						{10,98,65,0},
						{11,99,32,0},
						{12,98,71,0},
						{13,76,91,0},};
	
	char *name[10] ={"ace",
					 "deuce",
					 "three",
					 "four",
					 "five",
					 "six",
					 "seven",
					 "eight",
					 "nine",
					 "ten"};

    puts("Data items in original order");
    // output original array
    for(j=0;j<10;j++)
    {	for (i = 1; i < SIZE-1; ++i) {
        	a[j][3]+=a[j][i]/2;
    	}
	}
    
    
    for(j=0;j<10;j++)
    {
		printf("%8s", name[j]);
		for (i = 0; i < SIZE; ++i) {
        		printf("%4d", a[j][i]);
    		}
    		printf("\n");
	}
    
/*    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
*/
    // bubble sort                                         
    // loop to control number of passes                    

    sort(name ,a, stu);
    puts("\nData items in ascending order");

    for(j=0;j<10;j++)
    {	printf("%8s", name[j]);
		for (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}
	

	puts("\n平均成績最低與最高的同學：");
	printf("%4d %4d", a[0][0] ,a[0][3]);
	printf("\n");
	printf("%4d %4d", a[9][0] ,a[9][3]);
	printf("\n");
	

	printf("\n中位數同學是%d，他的成績是%d",a[SIZE][0] ,a[SIZE][3]);
	printf("\n");
	
	

}


void sort(char **name[], int a[][SIZE], int size)
{char *ptr;
    int hold,pass,i;
    for (pass = 1; pass < size; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][3] < a[i + 1][3]) {
            	ptr=name[i];
            	name[i]=name[i+1];
            	name[i+1]=ptr;
                swap(&a[i][0], &a[i+1][0]);
                swap(&a[i][1], &a[i+1][1]);
                swap(&a[i][2], &a[i+1][2]);
                swap(&a[i][3], &a[i+1][3]);
            }
        }
    }

}

void swap(int *e1Ptr,int*e2Ptr)
{int hold;
hold=*e1Ptr;
*e1Ptr=*e2Ptr;
*e2Ptr=hold;
}


problem2(未完成)
#include <stdio.h>
#define SIZE 10

// prototypes
void bubble(int work[], size_t size, int (*compare)(int a, int b));
void ascending(int a, int b);
void descending(int a, int b);

void(*f[2])(int, int) = {ascending,descending};
//int ascending(int a, int b);
//int descending(int a, int b);
int counter,count;
unsigned int pass;

int main(void)
{
   // initialize unordered array a
   int a[SIZE] = {2, 6, 4, 8, 10, 12, 89, 68, 45, 37};

   printf("%s", "Enter 1 to sort in ascending order,\n" 
          "Enter 2 to sort in descending order: ");
   int order; // 1 for ascending order or 2 for descending order
   scanf("%d", &order);

   puts("\nData items in original order");
   
   // output original array
   for (counter = 0; counter < SIZE; ++counter) {
      printf("%5d", a[counter]);
   } 

   // sort array in ascending order; pass function ascending as an
   // argument to specify ascending sorting order
   if (order == 1) {
      bubble(a, SIZE, (*f[0]));
      puts("\nData items in ascending order");
   }  
   else { // pass function descending
      bubble(a, SIZE, (*f[1]));
      puts("\nData items in descending order");
   }

   // output sorted array
   for (counter = 0; counter < SIZE; ++counter) {
      printf("%5d", a[counter]);   
   } 

   puts("\n");
} 

// multipurpose bubble sort; parameter compare is a pointer to
// the comparison function that determines sorting order
void bubble(int work[], size_t size, int (*compare)(int a, int b))
{
   void swap(int *element1Ptr, int *element2ptr); // prototype

   // loop to control passes
   for (pass = 1; pass < size; ++pass) {

      // loop to control number of comparisons per pass
      for (count = 0; count < size - 1; ++count) {

         // if adjacent elements are out of order, swap them
         if ((*compare)(work[count], work[count + 1])) {
            swap(&work[count], &work[count + 1]);
         } 
      } 
   } 
}

// swap values at memory locations to which element1Ptr and 
// element2Ptr point
void swap(int *element1Ptr, int *element2Ptr)
{
   int hold = *element1Ptr;
   *element1Ptr = *element2Ptr;
   *element2Ptr = hold;
}

// determine whether elements are out of order for an ascending
// order sort                                               
void ascending(int a, int b)                         
{                                                              
   return b < a; // should swap if b is less than a         
}

// determine whether elements are out of order for a descending
// order sort                                               
void descending(int a, int b)                                
{                                                              
   return b > a; // should swap if b is greater than a      
}
